package laserdisc.sbt.io

import _root_.sbt.{Def, *}
import laserdisc.sbt.*
import laserdisc.sbt.defaults.PluginInfo

/* reusable code for plugin functionality which seeks to template files in the current
 * project from a resource found in the plugin's classpath.
 */
trait FileTemplater {

  private[this] val log: SettingKey[Logger] = Keys.sLog

  /** @return The `SettingKey[Boolean]` which controls whether this functionality is enabled or not
    */
  def enabledFlag: SettingKey[Boolean]

  /** @return The name of the resource that will be loaded as the template
    */
  def inputResourceName: String

  /** @return The file to which the generated output will be written
    */
  def outputFile: File

  private[this] def stripCommentary(in: Seq[String]): Seq[String] =
    in.dropWhile(_.isBlank).filter(!_.matches("^\\s*###.*$"))

  // names have to be unique, so let's use the impl class name
  private def settingKeyName: String = "laserdiscTemplater" + getClass.getSimpleName.replaceAll("\\$", "")

  /** Returns a setting key, that when evaluated will do nothing if [[enabledFlag]] is `false`, otherwise:
    * <ul>
    *   <li>will load the resource defined by [[inputResourceName]]</li>
    *   <li>remove any lines prefixed with `###` (the source may contain instructional comments)</li>
    *   <li>prepend a warning indicating that the content has been autogenerated</li>
    *   <li>write the content to [[outputFile]]</li>
    * </ul>
    */
  def generateSettings: Def.Setting[Unit] =
    SettingKey[Unit](settingKeyName) := (
      if (enabledFlag.value) {

        log.value.pluginDebug(s"Trying to load: $inputResourceName")

        val lines      = readResourceLines(log.value, inputResourceName)
        val newContent = buildHeader() + stripCommentary(lines).mkString("\n")

        readFile(log.value, outputFile) match {
          case Right(existingContent) if existingContent == newContent =>
            log.value.pluginInfo(s"$outputFile is already up to date, ignoring.")
          case Right(_) =>
            log.value.pluginWarn(s"$outputFile is out of date, overwriting.  Please commit this change!")
            writeFile(log.value, outputFile, newContent)
          case Left(e) =>
            log.value.pluginWarn(s"Rebuilding $outputFile (reason:${e.getMessage}).  Please commit this change.")
            writeFile(log.value, outputFile, newContent)
        }
      } else {
        log.value.pluginWarn(s"Setting '${enabledFlag.key.label}' is 'false', skipping generation of $outputFile")
      }
    )

  private def buildHeader(prefix: String = "#"): String =
    s"""$prefix ------------------ autogenerated file - do not edit -------------------
       |$prefix           This file was generated by ${PluginInfo.name}
       |$prefix
       |$prefix  Please check in any changes generated in this file (for IDE support)
       |$prefix
       |$prefix To make changes, please publish a new version of the plugin at:
       |$prefix       ${UsefulURLs.ThisPluginRepo}
       |$prefix
       |$prefix To temporarily disable generation, set this at the top of build.sbt:
       |$prefix             ThisBuild / ${enabledFlag.key} := false
       |$prefix -----------------------------------------------------------------------
       |""".stripMargin

}
